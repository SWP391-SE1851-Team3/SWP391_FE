import React, { useState, useEffect } from 'react';
import { getHealthConsentByParent, updateHealthConsent, getHealthCheckResultsByStudent } from '../../../api/healthCheck_parent.js';
import './healthCheckNotification.css';

const ParentHealthCheck = () => {
  const [selectedStudent, setSelectedStudent] = useState(null);
  const [consent, setConsent] = useState('');
  const [reason, setReason] = useState('');
  const [students, setStudents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const currentParentId = localStorage.getItem('parentId');
  const currentUserLogin = localStorage.getItem('parentName');

  useEffect(() => {
    if (!currentParentId) {
      alert('Vui l√≤ng ƒëƒÉng nh·∫≠p!');
      return;
    }
    loadStudents();
  }, []);

  const loadStudents = async () => {
    setLoading(true);
    setError(null);
    try {
      const consentData = await getHealthConsentByParent(currentParentId);

      const studentsData = Array.isArray(consentData) ? consentData : [consentData];
      const transformedStudents = studentsData.map(item => ({
        id: item.studentID,
        name: item.studentName,
        class: item.className,
        formId: item.formID,
        parentId: item.parentID,
        healthScheduleId: item.healthScheduleID,
        healthScheduleName: item.healthScheduleName,
        isAgreed: item.isAgreed,
        notes: item.notes,
        sendDate: item.send_date,
        expireDate: item.expire_date,
        pendingChecks: item.isAgreed === 'pending' || !item.isAgreed ? 1 : 0,
        consentStatus: getConsentStatus(item.isAgreed),
        healthHistory: []
      }));

      setStudents(transformedStudents);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch h·ªçc sinh: ' + err.message);
      console.error('Error loading students:', err);
    } finally {
      setLoading(false);
    }
  };

  const getConsentStatus = (isAgreed) => {
    if (!isAgreed || isAgreed === 'pending') return 'pending';
    if (isAgreed === 'yes' || isAgreed === 'agreed' || isAgreed === 'true') return 'approved';
    if (isAgreed === 'no' || isAgreed === 'rejected' || isAgreed === 'false') return 'rejected';
    return 'pending';
  };

  const getConsentStatusText = (status) => {
    switch (status) {
      case 'approved': return 'ƒê√£ ƒë·ªìng √Ω';
      case 'rejected': return 'ƒê√£ t·ª´ ch·ªëi';
      case 'pending':
      default: return 'Ch·ªù x√°c nh·∫≠n';
    }
  };

  const loadStudentHealthHistory = async (studentId) => {
    try {
      const healthResults = await getHealthCheckResultsByStudent(studentId);

      const historyData = Array.isArray(healthResults) ? healthResults : [healthResults];
      return historyData.map(item => ({
        id: item.checkID,
        date: new Date(item.create_at).toLocaleDateString('vi-VN'),
        result: item.overallResult || 'Ch∆∞a c√≥ k·∫øt qu·∫£',
        height: item.height,
        weight: item.weight,
        bmi: item.bmi,
        temperature: item.temperature,
        visionLeft: item.visionLeft,
        visionRight: item.visionRight,
        hearing: item.hearing,
        dentalCheck: item.dentalCheck,
        createdByNurseName: item.createdByNurseName,
        updatedByNurseName: item.updatedByNurseName,
        className: item.className,
        fullName: item.fullName,
        note: item.notes || 'Kh√¥ng c√≥ ghi ch√∫ ƒë·∫∑c bi·ªát'
      }));
    } catch (err) {
      console.error('Error loading health history:', err);
      return [];
    }
  };

  const handleSelectStudent = async (student) => {
    setSelectedStudent({
      ...student,
      healthHistory: []
    });

    // Load l·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe
    const history = await loadStudentHealthHistory(student.id);
    setSelectedStudent(prev => ({
      ...prev,
      healthHistory: history
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (consent === '') {
      alert('Vui l√≤ng ch·ªçn ƒê·ªìng √Ω ho·∫∑c Kh√¥ng ƒë·ªìng √Ω');
      return;
    }

    if (consent === 'no' && !reason.trim()) {
      alert('Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi');
      return;
    }

    setLoading(true);
    try {
      const currentDateTime = new Date().toISOString();

      const updateData = {
        formID: selectedStudent.formId,
        studentID: selectedStudent.id,
        parentID: selectedStudent.parentId,
        studentName: selectedStudent.name,
        className: selectedStudent.class,
        healthScheduleID: selectedStudent.healthScheduleId,
        healthScheduleName: selectedStudent.healthScheduleName,
        isAgreed: consent === 'yes' ? 'yes' : 'no',
        notes: consent === 'no' ? reason : `Ph·ª• huynh ${currentUserLogin} ƒë·ªìng √Ω cho con tham gia kh√°m s·ª©c kh·ªèe`,
        send_date: selectedStudent.sendDate,
        expire_date: selectedStudent.expireDate,
        response_date: currentDateTime,
        parent_signature: currentUserLogin
      };

      await updateHealthConsent(selectedStudent.formId, updateData);

      alert('G·ª≠i x√°c nh·∫≠n th√†nh c√¥ng!');

      // Reset form
      setSelectedStudent(null);
      setConsent('');
      setReason('');

      // Reload danh s√°ch
      await loadStudents();

    } catch (err) {
      alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i x√°c nh·∫≠n: ' + err.message);
      console.error('Error submitting consent:', err);
    } finally {
      setLoading(false);
    }
  };

  const isExpired = (expireDate) => {
    if (!expireDate) return false;
    return new Date(expireDate) < new Date();
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'Ch∆∞a x√°c ƒë·ªãnh';
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  // Loading state
  if (loading && students.length === 0) {
    return (
      <div className="vaccine-record-container">
        <div className="loading">
          <div className="spinner"></div>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="vaccine-record-container">
        <div className="error">
          <h3>C√≥ l·ªói x·∫£y ra</h3>
          <p>{error}</p>
          <button onClick={loadStudents} className="retry-btn">
            <span>üîÑ</span> Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="vaccine-record-container">
      {/* Header */}
      <header className="page-header">
        {selectedStudent && (
          <button
            className="back-btn"
            onClick={() => {
              setSelectedStudent(null);
              setConsent('');
              setReason('');
            }}
            disabled={loading}
          >
            <span>‚Üê</span> Quay l·∫°i
          </button>
        )}
        <h2>
          {selectedStudent ?
            `Th√¥ng B√°o Kh√°m S·ª©c Kh·ªèe - ${selectedStudent.name}` :
            'Th√¥ng Tin Kham S·ª©c Kh·ªèe C·ªßa H·ªçc Sinh'
          }
        </h2>
        <div className="user-info">
          <span>Ph·ª• huynh: {currentUserLogin}</span>
          <span>Ng√†y: {formatDate(new Date().toISOString())}</span>
        </div>
      </header>

      {!selectedStudent ? (
        // Danh s√°ch h·ªçc sinh
        <div className="students-list">
          {students.length === 0 ? (
            <div className="no-data">
              <div className="no-data-icon">üìã</div>
              <h3>Kh√¥ng c√≥ th√¥ng tin</h3>
              <p>Hi·ªán t·∫°i kh√¥ng c√≥ th√¥ng b√°o kh√°m s·ª©c kh·ªèe n√†o cho c√°c con c·ªßa b·∫°n.</p>
              <button onClick={loadStudents} className="refresh-btn">
                L√†m m·ªõi
              </button>
            </div>
          ) : (
            <>
              {/* <div className="list-summary">
                <p>C√≥ <strong>{students.length}</strong> th√¥ng b√°o kh√°m s·ª©c kh·ªèe</p>
              </div> */}
              {students.map((student) => (
                <div key={student.id} className="student-card">
                  <div className="student-avatar">
                    <span>{student.name.charAt(0)}</span>
                  </div>
                  <div className="student-content">
                    <div className="student-header">
                      <h3>
                        {student.name}
                        {student.pendingChecks > 0 && (
                          <span className="notification-dot" title={`${student.pendingChecks} th√¥ng b√°o m·ªõi`}>
                            {student.pendingChecks}
                          </span>
                        )}
                      </h3>
                      <span className={`status-badge ${student.consentStatus}`}>
                        {getConsentStatusText(student.consentStatus)}
                      </span>
                    </div>

                    <div className="student-details">
                      <div className="detail-row">
                        <span className="label">L·ªõp:</span>
                        <span className="value">{student.class}</span>
                      </div>
                      <div className="detail-row">
                        <span className="label">Lo·∫°i kh√°m:</span>
                        <span className="value">{student.healthScheduleName || 'Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t'}</span>
                      </div>
                      <div className="detail-row">
                        <span className="label">Ng√†y g·ª≠i:</span>
                        <span className="value">{formatDate(student.sendDate)}</span>
                      </div>
                      <div className="detail-row">
                        <span className="label">H·∫°n ph·∫£n h·ªìi:</span>
                        <span className={`value ${isExpired(student.expireDate) ? 'expired' : ''}`}>
                          {formatDate(student.expireDate)}
                          {isExpired(student.expireDate) && <span className="expired-text"> (ƒê√£ h·∫øt h·∫°n)</span>}
                        </span>
                      </div>
                    </div>

                    <div className="action-buttons">
                      <button
                        className="view-btn primary"
                        onClick={() => handleSelectStudent(student)}
                        disabled={loading}
                      >
                        {loading ? 'ƒêang t·∫£i...' : 'Xem chi ti·∫øt'}
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </>
          )}
        </div>
      ) : (
        // Chi ti·∫øt h·ªçc sinh
        <div className="student-detail-view">
          {/* Th√¥ng tin c∆° b·∫£n */}
          <div className="info-section">
            <h3>Th√¥ng tin kh√°m s·ª©c kh·ªèe</h3>
            <div className="info-grid">
              <div className="info-item">
                <span className="info-label">H·ªç t√™n h·ªçc sinh:</span>
                <span className="info-value">{selectedStudent.name}</span>
              </div>
              <div className="info-item">
                <span className="info-label">L·ªõp:</span>
                <span className="info-value">{selectedStudent.class}</span>
              </div>
              <div className="info-item">
                <span className="info-label">Lo·∫°i kh√°m:</span>
                <span className="info-value">{selectedStudent.healthScheduleName || 'Kh√°m s·ª©c kh·ªèe t·ªïng qu√°t'}</span>
              </div>
              <div className="info-item">
                <span className="info-label">ƒê·ªãa ƒëi·ªÉm:</span>
                <span className="info-value">T·∫°i tr∆∞·ªùng</span>
              </div>
              <div className="info-item">
                <span className="info-label">Ng√†y g·ª≠i th√¥ng b√°o:</span>
                <span className="info-value">{formatDate(selectedStudent.sendDate)}</span>
              </div>
              <div className="info-item">
                <span className="info-label">H·∫°n ph·∫£n h·ªìi:</span>
                <span className={`info-value ${isExpired(selectedStudent.expireDate) ? 'expired' : ''}`}>
                  {formatDate(selectedStudent.expireDate)}
                  {isExpired(selectedStudent.expireDate) && <span className="expired-text"> (ƒê√£ h·∫øt h·∫°n)</span>}
                </span>
              </div>
              <div className="info-item">
                <span className="info-label">Tr·∫°ng th√°i hi·ªán t·∫°i:</span>
                <span className={`status-badge ${selectedStudent.consentStatus}`}>
                  {getConsentStatusText(selectedStudent.consentStatus)}
                </span>
              </div>
            </div>

            {selectedStudent.notes && (
              <div className="notes-section">
                <h4>Ghi ch√∫:</h4>
                <p className="notes-content">{selectedStudent.notes}</p>
              </div>
            )}
          </div>

          {/* Form x√°c nh·∫≠n */}
          {(!selectedStudent.isAgreed || selectedStudent.isAgreed === 'pending') && !isExpired(selectedStudent.expireDate) && (
            <div className="consent-section">
              <h3>X√°c nh·∫≠n tham gia</h3>
              <form onSubmit={handleSubmit} className="consent-form">
                <div className="form-group">
                  <label className="form-label">
                    B·∫°n c√≥ ƒë·ªìng √Ω cho <strong>{selectedStudent.name}</strong> tham gia kh√°m s·ª©c kh·ªèe n√†y kh√¥ng?
                  </label>
                  <div className="radio-group">
                    <label className="radio-label">
                      <input
                        type="radio"
                        value="yes"
                        checked={consent === 'yes'}
                        onChange={() => setConsent('yes')}
                        disabled={loading}
                      />
                      <span className="radio-custom"></span>
                      <span className="radio-text agree">‚úì ƒê·ªìng √Ω</span>
                    </label>
                    <label className="radio-label">
                      <input
                        type="radio"
                        value="no"
                        checked={consent === 'no'}
                        onChange={() => setConsent('no')}
                        disabled={loading}
                      />
                      <span className="radio-custom"></span>
                      <span className="radio-text disagree">‚úó Kh√¥ng ƒë·ªìng √Ω</span>
                    </label>
                  </div>
                </div>

                {consent === 'no' && (
                  <div className="form-group">
                    <label className="form-label">
                      L√Ω do t·ª´ ch·ªëi <span className="required">*</span>
                    </label>
                    <textarea
                      value={reason}
                      onChange={(e) => setReason(e.target.value)}
                      required
                      placeholder="Vui l√≤ng nh·∫≠p l√Ω do t·∫°i sao kh√¥ng ƒë·ªìng √Ω cho con tham gia kh√°m s·ª©c kh·ªèe..."
                      disabled={loading}
                      className="reason-textarea"
                      rows="4"
                    />
                  </div>
                )}

                <div className="form-actions">
                  <button type="submit" className="submit-btn" disabled={loading}>
                    {loading ? (
                      <>
                        <span className="spinner-small"></span>
                        ƒêang g·ª≠i...
                      </>
                    ) : (
                      <>
                        <span>üì§</span>
                        G·ª≠i x√°c nh·∫≠n
                      </>
                    )}
                  </button>
                </div>
              </form>
            </div>
          )}

          {/* Th√¥ng b√°o n·∫øu ƒë√£ h·∫øt h·∫°n */}
          {isExpired(selectedStudent.expireDate) && selectedStudent.consentStatus === 'pending' && (
            <div className="expired-notice">
              <h3>‚ö†Ô∏è Th√¥ng b√°o</h3>
              <p>Th·ªùi h·∫°n ph·∫£n h·ªìi cho th√¥ng b√°o n√†y ƒë√£ h·∫øt. Vui l√≤ng li√™n h·ªá v·ªõi nh√† tr∆∞·ªùng ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
            </div>
          )}

          {/* L·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe */}
          <div className="history-section">
            <h3>L·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe</h3>
            {selectedStudent.healthHistory.length > 0 ? (
              <div className="history-list">
                {selectedStudent.healthHistory.map((item) => (
                  <div key={item.id} className="history-item">
                    <div className="history-header">
                      <span className="history-date">üìÖ {item.date}</span>
                      <span className={`history-result ${item.result?.toLowerCase().includes('b√¨nh th∆∞·ªùng') ? 'normal' : 'attention'}`}>
                        {item.result}
                      </span>
                    </div>
                    <div className="history-details">
                      {item.height > 0 && (
                        <div className="detail-item">
                          <span>Chi·ªÅu cao:</span> <span>{item.height} cm</span>
                        </div>
                      )}
                      {item.weight > 0 && (
                        <div className="detail-item">
                          <span>C√¢n n·∫∑ng:</span> <span>{item.weight} kg</span>
                        </div>
                      )}
                      {item.bmi > 0 && (
                        <div className="detail-item">
                          <span>BMI:</span> <span>{item.bmi}</span>
                        </div>
                      )}
                      {item.temperature && (
                        <div className="detail-item">
                          <span>Nhi·ªát ƒë·ªô:</span> <span>{item.temperature}¬∞C</span>
                        </div>
                      )}
                      {(item.visionLeft || item.visionRight) && (
                        <div className="detail-item">
                          <span>Th·ªã l·ª±c:</span>
                          <span>
                            M·∫Øt tr√°i: {item.visionLeft || 'N/A'},
                            M·∫Øt ph·∫£i: {item.visionRight || 'N/A'}
                          </span>
                        </div>
                      )}
                      {item.hearing && (
                        <div className="detail-item">
                          <span>Th√≠nh l·ª±c:</span> <span>{item.hearing}</span>
                        </div>
                      )}
                      {item.dentalCheck && (
                        <div className="detail-item">
                          <span>RƒÉng mi·ªáng:</span> <span>{item.dentalCheck}</span>
                        </div>
                      )}
                      {item.createdByNurseName && (
                        <div className="detail-item">
                          <span>Y t√° kh√°m:</span> <span>{item.createdByNurseName}</span>
                        </div>
                      )}
                    </div>
                    {item.note && (
                      <div className="history-note">
                        <strong>Ghi ch√∫:</strong> {item.note}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-history">
                <div className="no-history-icon">üè•</div>
                <p>Ch∆∞a c√≥ l·ªãch s·ª≠ kh√°m s·ª©c kh·ªèe</p>
                <small>L·ªãch s·ª≠ kh√°m s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau khi h·ªçc sinh tham gia kh√°m s·ª©c kh·ªèe</small>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default ParentHealthCheck;